{"version":3,"sources":["Components/Form.js","Components/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","value","name","password","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","requestUrl","fetch","then","res","json","data","length","history","push","className","center","middle","lg","md","xs","onSubmit","type","onChange","React","Component","ContactItem","contact","handleDeleteUser","src","image","width","height","phoneNumber","onClick","id","Contacts","displayedContacts","loading","contactName","contactNumber","contactImage","handleSearch","handleAddContact","handleSubmitContact","e","newId","newUser","JSON","stringify","method","body","headers","prevState","filter","searchQuery","toLowerCase","filteredContacts","el","indexOf","list","map","i","key","mdOffset","lgOffset","placeholder","action","createBrowserHistory","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.033343d0.chunk.js","sourcesContent":["import React from \"react\";\nimport {Row, Grid, Col} from \"react-flexbox-grid\";\n\n\nclass Form extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      name: '',\n      password: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const requestUrl = `http://localhost:3000/user?name=${this.state.name}&password=${this.state.password}`\n\n    fetch(requestUrl)\n      .then(res => res.json())\n      .then(data => {\n        if (data.length) {\n          this.props.history.push('/contacts')\n        }\n      })\n  }\n\n\n  render() {\n    return(\n        <div className=\"form-layout\">\n          <Grid>\n            <Row center=\"lg\"\n                 middle=\"xs\">\n              <Col\n                   lg={6}\n                   md={6}\n                   xs={12}>\n                <form onSubmit={this.handleSubmit}>\n                  <label>\n                    Name:\n                    <input type=\"text\"\n                           name=\"name\"\n                           className=\"form__input-authorisation\"\n                           value={this.state.name}\n                           onChange={this.handleChange} />\n                  </label>\n                  <label>\n                    Password:\n                    <input type=\"text\"\n                           name=\"password\"\n                           className=\"form__input-authorisation\"\n                           value={this.state.password}\n                           onChange={this.handleChange} />\n                  </label>\n                    <input type=\"submit\"\n                           value=\"Submit\"\n                           className=\"submit-btn\"/>\n                </form>\n              </Col>\n            </Row>\n          </Grid>\n        </div>\n    )\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport {Row, Grid, Col} from \"react-flexbox-grid\";\n\n\n const ContactItem = (props) => {\n  const { contact, handleDeleteUser } = props;\n  const handleDelete = () => handleDeleteUser(contact.id)\n\n\n     return (\n       <li className=\"contacts__link\">\n         <img className=\"contacts__image\"\n              src={contact.image}\n              width=\"60px\"\n              height=\"60px\" />\n         <div className=\"contacts-info-layout\">\n           <div className=\"contacts__name\"> {contact.name} </div>\n           <div className=\"contacts-info\">\n             <div className=\"contacts__number\"> {contact.phoneNumber}</div>\n           </div>\n         </div>\n         <div className=\"delete-contact-btn\"\n              onClick={handleDelete}>X</div>\n       </li>\n     );\n   }\n\nclass Contacts extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      displayedContacts: [],\n      loading: false,\n      value: '',\n      contactName: '',\n      contactNumber: '',\n      contactImage: ''\n    }\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleAddContact = this.handleAddContact.bind(this);\n    this.handleSubmitContact = this.handleSubmitContact.bind(this);\n    this.handleDeleteUser = this.handleDeleteUser.bind(this)\n  }\n\n  componentDidMount() {\n\n    const requestUrl = 'http://localhost:3000/contacts'\n\n    const response = fetch(requestUrl)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          displayedContacts: data, loading: true\n        })\n      }\n    )\n  }\n\n  handleSubmitContact(e) {\n\n    e.preventDefault();\n\n    const newId = this.state.displayedContacts.length + 1\n\n    const newUser = JSON.stringify({\n      name: this.state.contactName,\n      phoneNumber: this.state.contactNumber,\n      image: this.state.contactImage,\n      id: newId\n    })\n\n    if (!this.state.contactName.length || !this.state.contactNumber || !this.state.contactImage ) {\n      return\n    }\n\n    fetch('http://localhost:3000/contacts', {\n      method: 'POST',\n      body: newUser,\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(res => res.json())\n      .then(data => {\n\n          this.setState((prevState)=> ({\n            displayedContacts: [...prevState.displayedContacts, data]\n          }))\n      })\n  }\n\n  handleAddContact(e) {\n\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n\n  handleDeleteUser(id) {\n\n    fetch(`http://localhost:3000/contacts/${id}`, {\n    method: 'DELETE',\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    })\n      .then(res => res.json())\n      .then(() => {\n\n        this.setState({\n          displayedContacts:  this.state.displayedContacts.filter(contact => contact.id !== id)\n        })\n      })\n  }\n\n\n  handleSearch(e) {\n    const searchQuery = e.target.value.toLowerCase();\n\n    const filteredContacts = this.state.displayedContacts.filter(function(el) {\n      const searchValue = el.name.toLowerCase();\n      return searchValue.indexOf(searchQuery) !== -1;\n    });\n\n    this.setState({\n      displayedContacts: filteredContacts\n    })\n  }\n\n\n  render() {\n\n    const list = this.state.displayedContacts.map((contact, i) => {\n      return <ContactItem contact={contact}\n                          key={contact.id}\n                          handleDeleteUser={this.handleDeleteUser}/>\n    })\n\n    return(\n      <Grid>\n        <Row >\n          <Col mdOffset={1}\n               lgOffset={2}\n               lg={4}\n               md={6}\n               xs={12}>\n            <div className=\"contacts\">\n              <input type=\"text\"\n                     placeholder=\"Search...\"\n                     className=\"contacts__search-field\"\n                     onChange={this.handleSearch}\n              />\n              <ul className=\"contacts__list\">\n                {list}\n              </ul>\n            </div>\n          </Col>\n          <Col lg={6}>\n\n            <form action=\"\"\n                  className=\"contacts-form\"\n                  onSubmit={this.handleSubmitContact}>\n\n              <input type=\"submit\"\n                     value=\"SubmitContact\"\n                     className=\"contacts-form-submit-btn\"\n\n              />\n\n                <input type=\"text\"\n                       name=\"contactName\"\n                       className=\"contacts-form__input\"\n                       placeholder=\"Name and Surname\"\n                       value={this.state.contactName}\n                       onChange={this.handleAddContact}\n                        />\n\n\n                <input type=\"text\"\n                       name=\"contactNumber\"\n                       className=\"contacts-form__input\"\n                       placeholder=\"Tel\"\n                       value={this.state.contactNumber}\n                       onChange={this.handleAddContact}\n                        />\n\n                <input type=\"text\"\n                       name=\"contactImage\"\n                       className=\"contacts-form__input\"\n                       placeholder=\"Image url\"\n                       value={this.state.contactImage}\n                       onChange={this.handleAddContact}\n                />\n\n            </form>\n\n          </Col>\n\n        </Row>\n      </Grid>\n    )\n  }\n}\n\nexport default Contacts;\n","import React from 'react';\nimport './App.css';\nimport Form from \"./Components/Form\";\nimport Contacts from \"./Components/Contacts\";\nimport {Row, Grid, Col} from \"react-flexbox-grid\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  browserHistory\n} from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\n\nfunction App() {\n  return (\n    <Router history={history}>\n\n\n      <Switch>\n        <Route exact path=\"/\"\n               component={Form} />\n\n        <Route  path=\"/contacts\"\n                component={Contacts} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}